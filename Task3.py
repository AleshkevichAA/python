#  Реализовать программу работы с органическими клетками, состоящими из ячеек. Необходимо
# создать класс Клетка. В его конструкторе инициализировать параметр, соответствующий
# количеству ячеек клетки (целое число). В классе должны быть реализованы методы
# перегрузки арифметических операторов: сложение (__add__()), вычитание (__sub__()),
# умножение (__mul__()), деление (__truediv__()). Данные методы должны применяться только
# к клеткам и выполнять увеличение, уменьшение, умножение и целочисленное (с округлением
# до целого) деление клеток, соответственно.
# Сложение. Объединение двух клеток. При этом число ячеек общей клетки должно равняться
# сумме ячеек исходных двух клеток.
# Вычитание. Участвуют две клетки. Операцию необходимо выполнять только если разность
# количества ячеек двух клеток больше нуля, иначе выводить соответствующее сообщение.
# Умножение. Создается общая клетка из двух. Число ячеек общей клетки определяется как
# произведение количества ячеек этих двух клеток.
# Деление. Создается общая клетка из двух. Число ячеек общей клетки определяется как
# целочисленное деление количества ячеек этих двух клеток.
# В классе необходимо реализовать метод make_order(), принимающий экземпляр класса и
# количество ячеек в ряду. Данный метод позволяет организовать ячейки по рядам.
# Метод должен возвращать строку вида *****\n*****\n*****..., где количество ячеек между \n
# равно переданному аргументу. Если ячеек на формирование ряда не хватает, то в последний
# ряд записываются все оставшиеся.
# Например, количество ячеек клетки равняется 12, количество ячеек в ряду — 5. Тогда метод
# make_order() вернет строку: *****\n*****\n**.
# Или, количество ячеек клетки равняется 15, количество ячеек в ряду — 5. Тогда метод
# make_order() вернет строку: *****\n*****\n*****.

class OrganicCell():
    def __init__(self, count):
        self.count = count

    def __add__(self, other):
        self.count += other.count
        return self

    def __sub__(self, other):
        if (self.count > other.count):
            self.count -= other.count
        else:
            print(f'Разница {self.count} и {other.count} меньше нуля')
        return self

    def __mul__(self, other):
        self.count = self.count * other.count
        return self

    def __truediv__(self, other):
        try:
            res = int(self.count / other.count)
            self.count = res
        except Exception:
            print('Неудачное деление')
        return self

    def __str__(self):
        return f'{self.count}'

    def make_order(self, cell, size):
        res = ''
        for i in range(1, cell.count + 1):
            res += str(cell.count) + (' ' if (i % size > 0) else ('\n'))
        return res


cell = OrganicCell(10)
print(cell)
cell2 = OrganicCell(3)
print(cell2)
print('cell+cell2 = ', cell + cell2)
cell = OrganicCell(10)
print('cell-cell2 = ', cell - cell2)
cell = OrganicCell(10)
print('cell*cell2 = ', cell * cell2)
cell = OrganicCell(10)
print('cell/cell2 = ', cell / cell2)

print(cell.make_order(OrganicCell(12), 5))
